#!/usr/bin/make -f

## ----------------------------------------------------------------------
## A program to turn a Flask app directory into a docker image, and run it
## 
## Usage: dockerize-flask [COMMAND] [OPTIONS]
## ----------------------------------------------------------------------


MAKEFLAGS += --warn-undefined-variables
SHELL := bash
.ONESHELL:
.SILENT:

local-port := 5000
remote-port := 5000
name := $(notdir $(PWD))
flask-debug := 1
base-image := python:3.11.0-alpine


override filename := $(lastword $(MAKEFILE_LIST))
override version := 0.1

## 
## Commands: 
## run (default): build & run a Docker container
.PHONY:
run: Dockerfile 
	docker build --tag $(name) .
	docker run \
		--env FLASK_DEBUG=$(flask-debug) \
		--publish $(local-port):$(remote-port) \
		--rm \
		--name $(name) \
		--volume `pwd`:/app \
		$(name)


## Dockerfile: create a basic Dockerfile if not exist
Dockerfile: requirements.txt
	echo $@ >> .cleanme
	cat <<EOF >> Dockerfile
	FROM $(base-image)
	WORKDIR /app
	COPY requirements.txt .
	RUN pip install -r requirements.txt
	COPY . .
	EXPOSE $(remote-port)
	CMD ["flask", "run", "--host=0.0.0.0"]
	EOF


## requirements.txt: create a basic requirements.txt if not exist
requirements.txt:
	echo $@ >> .cleanme
	echo flask > $@


## clean: remove all created files
.PHONY:
clean:
	$(foreach f, $(file < .cleanme), 
		$(shell rm -f $(f))
	)
	rm -f .cleanme


## install: install this in $PATH and make it executable
.PHONY:
install:
	chmod +x $(filename)
	cp $(filename) ~/.local/bin/
	$(info installed to ~/.local/bin/$(filename))


version: ## show my version number
	echo $(version)

## 
## Options:
## local-port=5000
## remote-port=5000
## name=`pwd`
## flask-debug=1
## base-image=python:alpine

help: ## show this message
	@sed -ne '/@sed/!s/## //p' $(MAKEFILE_LIST)


ifeq (,$(shell which docker))
	$(warning Warning: docker not installed)
endif